{
  "stats": {
    "suites": 23,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2018-07-05T11:09:28.624Z",
    "end": "2018-07-05T11:09:29.039Z",
    "duration": 415,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "a1720e38-fdf8-49cc-aed3-e2f6be41a1b6",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "84cad96e-5348-4e2f-894a-c71302a9d48b",
        "title": "Notification Enabler BACKEND",
        "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
        "file": "\\test\\configTestBE.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4c04d90f-19d1-446e-94f4-6bab1a53251f",
            "title": "API V0",
            "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
            "file": "\\test\\configTestBE.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "6cb0a16a-ebed-4e81-a4fa-092c1638b451",
                "title": "1. Testing Database Connection",
                "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                "file": "\\test\\configTestBE.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should Connect to Database without an error",
                    "fullTitle": "Notification Enabler BACKEND API V0 1. Testing Database Connection Should Connect to Database without an error",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "dbpool.getConnection(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2ed907a2-e4dc-449e-8782-a95ce03a5be0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2ed907a2-e4dc-449e-8782-a95ce03a5be0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 12,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "c28acd54-3cee-4642-a013-6fdf1466c4b7",
                "title": "2. GET /api/vf-os-enabler/v0/getApps/testingDeveloperID",
                "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                "file": "\\test\\configTestBE.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "2b32842b-bd66-4b5f-a257-a69e40909142",
                    "title": "2.1 Query all vApps for non-existing developerID",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 404",
                        "fullTitle": "Notification Enabler BACKEND API V0 2. GET /api/vf-os-enabler/v0/getApps/testingDeveloperID 2.1 Query all vApps for non-existing developerID should return status code 404",
                        "timedOut": false,
                        "duration": 23,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETVAPPS + \"/testingDeveloperID\", function(error,response,body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 404);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1fa187b5-e04e-4f39-96aa-d34b48c4ba41",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "1fa187b5-e04e-4f39-96aa-d34b48c4ba41"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 23,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "0e94f61e-9b4b-4eb8-b575-47d8942f94e2",
                    "title": "2.2 Query all vApps for existing developerID",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 200",
                        "fullTitle": "Notification Enabler BACKEND API V0 2. GET /api/vf-os-enabler/v0/getApps/testingDeveloperID 2.2 Query all vApps for existing developerID should return status code 200",
                        "timedOut": false,
                        "duration": 10,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETVAPPS + \"/miguel.rodrigues@knowledgebiz.pt\", function(error,response,body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 200);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1bc96b08-1a90-4a44-84e8-d67e5a34cbc4",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should return response body with success true",
                        "fullTitle": "Notification Enabler BACKEND API V0 2. GET /api/vf-os-enabler/v0/getApps/testingDeveloperID 2.2 Query all vApps for existing developerID should return response body with success true",
                        "timedOut": false,
                        "duration": 10,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETVAPPS + \"/miguel.rodrigues@knowledgebiz.pt\", function(error,response,body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\texpect(JSON.parse(body)).to.have.property('success', true);\n\tassert.equal(JSON.parse(body).success, true);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ba0c9199-66de-4cea-9535-4f898272496c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "1bc96b08-1a90-4a44-84e8-d67e5a34cbc4",
                      "ba0c9199-66de-4cea-9535-4f898272496c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 20,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "e368e7da-f039-49f5-a58c-4ed0a6b0a445",
                "title": "3. GET /api/vf-os-enabler/v0/getRules/testingRuleID",
                "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                "file": "\\test\\configTestBE.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "104a89e9-c13e-46c3-930f-6bde839a68e3",
                    "title": "3.1 Query all Rules for non-existing ruleID",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 404",
                        "fullTitle": "Notification Enabler BACKEND API V0 3. GET /api/vf-os-enabler/v0/getRules/testingRuleID 3.1 Query all Rules for non-existing ruleID should return status code 404",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETRULES + \"/testingRuleID\", function(error,response,body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 404);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c74e74c0-c443-4425-8a2b-f31f986b6e38",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "c74e74c0-c443-4425-8a2b-f31f986b6e38"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 8,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "c6f53e8d-32df-4e37-a8ae-7eded20aeb8c",
                    "title": "3.2 Query all Rules for existing ruleID",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 200",
                        "fullTitle": "Notification Enabler BACKEND API V0 3. GET /api/vf-os-enabler/v0/getRules/testingRuleID 3.2 Query all Rules for existing ruleID should return status code 200",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETRULES + \"/TR37\", function(error,response,body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 200);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "edbef859-16a7-4964-9e46-16ab725f42fe",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should return response body with success true",
                        "fullTitle": "Notification Enabler BACKEND API V0 3. GET /api/vf-os-enabler/v0/getRules/testingRuleID 3.2 Query all Rules for existing ruleID should return response body with success true",
                        "timedOut": false,
                        "duration": 12,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETRULES + \"/TR37\", function(error,response,body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\texpect(JSON.parse(body)).to.have.property('success', true);\n\tassert.equal(JSON.parse(body).success, true);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9a3f9bc7-8a33-42ef-b311-ec98e5c5be9a",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "edbef859-16a7-4964-9e46-16ab725f42fe",
                      "9a3f9bc7-8a33-42ef-b311-ec98e5c5be9a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 21,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "9c48d573-5d2e-4798-b104-8f51b25d586d",
                "title": "4. GET /api/vf-os-enabler/v0/getNotifications/testingAppID",
                "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                "file": "\\test\\configTestBE.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "09591f39-8ccf-4967-8c17-f10decaf48de",
                    "title": "4.1 Query all Notifications for non-existing AppID",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 404",
                        "fullTitle": "Notification Enabler BACKEND API V0 4. GET /api/vf-os-enabler/v0/getNotifications/testingAppID 4.1 Query all Notifications for non-existing AppID should return status code 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETNOTIFICATIONS + \"/testingAppID\", function(error,response,body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 404);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6366461b-2273-4185-8199-c3a90e4740c9",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "6366461b-2273-4185-8199-c3a90e4740c9"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 7,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "b2aa52e1-58a5-430d-8895-44ad2bd87bde",
                    "title": "4.2 Query all Notifications for existing AppID",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 200",
                        "fullTitle": "Notification Enabler BACKEND API V0 4. GET /api/vf-os-enabler/v0/getNotifications/testingAppID 4.2 Query all Notifications for existing AppID should return status code 200",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETNOTIFICATIONS + \"/TR37\", function(error,response,body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 200);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "10590fc9-dd03-4c8b-a7b5-81b3101850c5",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should return response body with success true",
                        "fullTitle": "Notification Enabler BACKEND API V0 4. GET /api/vf-os-enabler/v0/getNotifications/testingAppID 4.2 Query all Notifications for existing AppID should return response body with success true",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETNOTIFICATIONS + \"/TR37\", function(error,response,body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\texpect(JSON.parse(body)).to.have.property('success', true);\n\tassert.equal(JSON.parse(body).success, true);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "74484e5c-edcb-4a17-870d-e69746df111e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "10590fc9-dd03-4c8b-a7b5-81b3101850c5",
                      "74484e5c-edcb-4a17-870d-e69746df111e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 26,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "1573fda1-9103-48e8-9798-c3ec52445e5b",
                "title": "5. GET /api/vf-os-enabler/v0/getStatistics/testingRuleID",
                "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                "file": "\\test\\configTestBE.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "1a003dac-a595-4b87-bebd-5ab8e54d1060",
                    "title": "5.1 Query all Statistics for non-existing ruleID",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 404",
                        "fullTitle": "Notification Enabler BACKEND API V0 5. GET /api/vf-os-enabler/v0/getStatistics/testingRuleID 5.1 Query all Statistics for non-existing ruleID should return status code 404",
                        "timedOut": false,
                        "duration": 13,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETSTATISTICS + \"/testingRuleID\", function(error,response,body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 404);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "50288a17-505c-480f-a071-aa829c038592",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "50288a17-505c-480f-a071-aa829c038592"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 13,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "060a8f05-2229-4e94-8c2a-1dc3312da1ee",
                    "title": "5.2 Query all Statistics for existing ruleID",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 200",
                        "fullTitle": "Notification Enabler BACKEND API V0 5. GET /api/vf-os-enabler/v0/getStatistics/testingRuleID 5.2 Query all Statistics for existing ruleID should return status code 200",
                        "timedOut": false,
                        "duration": 11,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETSTATISTICS + \"/5\", function(error,response,body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 200);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a33b962a-70a9-424c-a2da-9453b4d19d33",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should return response body with success true",
                        "fullTitle": "Notification Enabler BACKEND API V0 5. GET /api/vf-os-enabler/v0/getStatistics/testingRuleID 5.2 Query all Statistics for existing ruleID should return response body with success true",
                        "timedOut": false,
                        "duration": 11,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETRULES + \"/5\", function(error,response,body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\texpect(JSON.parse(body)).to.have.property('success', true);\n\tassert.equal(JSON.parse(body).success, true);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "189561bb-56d6-45e6-8667-b55b94b900eb",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "a33b962a-70a9-424c-a2da-9453b4d19d33",
                      "189561bb-56d6-45e6-8667-b55b94b900eb"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 22,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "10aaed87-3f8d-4ead-95c7-9ac02a0abfd8",
                "title": "6. POST /api/vf-os-enabler/v0/register",
                "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                "file": "\\test\\configTestBE.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "0d222684-f35b-4879-9c4f-6939efc7ef80",
                    "title": "6.1 Create new vApp for an existing developerID",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 200",
                        "fullTitle": "Notification Enabler BACKEND API V0 6. POST /api/vf-os-enabler/v0/register 6.1 Create new vApp for an existing developerID should return status code 200",
                        "timedOut": false,
                        "duration": 44,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var post_data = {\n\turl: base_url + constants.ROUTES.v0.POST.REGISTERVAPP,\n\tform:{\n\t\tappID : [\n\t\t\"TR47\"\n\t\t],\n\t\tdeveloperID : [\n\t\t\"miguel.rodrigues@knowledgebiz.pt\"\n\t\t]\n\t}\n};\nrequest.post(post_data, function(error, response, body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 200);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bd1ceff3-7445-4168-90c0-e1f235114a96",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "DB should have the new vApp",
                        "fullTitle": "Notification Enabler BACKEND API V0 6. POST /api/vf-os-enabler/v0/register 6.1 Create new vApp for an existing developerID DB should have the new vApp",
                        "timedOut": false,
                        "duration": 22,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETVAPPS + \"/miguel.rodrigues@knowledgebiz.pt\", function(error,response,body){\n\tif (error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(JSON.parse(body).data[JSON.parse(body).data.length - 2].appID, \"TR47\");\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ca12348e-8bba-4e45-b4fb-6e1cdd62cbbe",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "bd1ceff3-7445-4168-90c0-e1f235114a96",
                      "ca12348e-8bba-4e45-b4fb-6e1cdd62cbbe"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 66,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "13a7a938-608a-4d49-97b2-12a0692e04e2",
                    "title": "6.2 Create new vApp for an existing developerID with no appID",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 404",
                        "fullTitle": "Notification Enabler BACKEND API V0 6. POST /api/vf-os-enabler/v0/register 6.2 Create new vApp for an existing developerID with no appID should return status code 404",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var post_data = {\n\turl: base_url + constants.ROUTES.v0.POST.REGISTERVAPP,\n\tform:{\n\t\tappID :[ \n\t\t\"\"\n\t\t],\n\t\tdeveloperID : [\n\t\t\"miguel.rodrigues@knowledgebiz.pt\"\n\t\t]\n\t}\n}\nrequest.post(post_data, function(error, response, body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 404);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a4a17cc8-7274-4e30-a5f5-617d5c1b66af",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "a4a17cc8-7274-4e30-a5f5-617d5c1b66af"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 8,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "75858535-b9e7-4b0c-b911-94e9798c07e2",
                "title": "7. POST /api/vf-os-enabler/v0/notification/rules",
                "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                "file": "\\test\\configTestBE.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "7b489b68-d607-43d3-8e3c-2f816d9d8f23",
                    "title": "7.1 Create new rule for an existing appID",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 200",
                        "fullTitle": "Notification Enabler BACKEND API V0 7. POST /api/vf-os-enabler/v0/notification/rules 7.1 Create new rule for an existing appID should return status code 200",
                        "timedOut": false,
                        "duration": 26,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var post_data = {\n\turl: base_url + constants.ROUTES.v0.POST.CREATERULES,\n\tform:{\n\t\tbody:[{\n\t\t\tappID: \"TR37\",\n\t\t\tdescription: \"TR47\",\n\t\t\tparameter: \"TR47\",\n\t\t\tconditionValue: \">\",\n\t\t\tcontrolValue: \"47\",\n\t\t\tthreshold: \"20\",\n\t\t\tnotifyType: \"Email\",\n\t\t\tnotificationType: \"5\",\n\t\t\thostname: \"null\",\n\t\t\tport: \"0\",\n\t\t\tpath: \"null\",\n\t\t\tmethod: \"null\",\n\t\t\temailTo: [\n\t\t\t\"miguel.rodrigues@knowledgebiz.pt\",\n\t\t\t\"miguel.andre.rodrigues@gmail.com\",\n\t\t\t\"ma.rodrigues@campus.fct.unl.pt\"\n\t\t\t]\n\t\t}]\n\t}\n};\nrequest.post(post_data, function(error, response, body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 200);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bf893787-3825-47cd-80cb-6ec372f74cf8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "DB should have the new rule",
                        "fullTitle": "Notification Enabler BACKEND API V0 7. POST /api/vf-os-enabler/v0/notification/rules 7.1 Create new rule for an existing appID DB should have the new rule",
                        "timedOut": false,
                        "duration": 10,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETRULES + \"/TR37\", function(error,response,body){\n\tif (error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(JSON.parse(body).data[JSON.parse(body).data.length - 1].parameter, \"TR47\");\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bca85e9e-bc71-426a-9e01-bb0855659914",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "bf893787-3825-47cd-80cb-6ec372f74cf8",
                      "bca85e9e-bc71-426a-9e01-bb0855659914"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 36,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "652000c7-a035-49d4-b40f-4d66d6f25038",
                "title": "8. POST /api/vf-os-enabler/v0/notifications",
                "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                "file": "\\test\\configTestBE.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "2c0f4988-94e1-42b0-aaa6-2e1160ca123b",
                    "title": "8.1 Create new notification for an existing token",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 200",
                        "fullTitle": "Notification Enabler BACKEND API V0 8. POST /api/vf-os-enabler/v0/notifications 8.1 Create new notification for an existing token should return status code 200",
                        "timedOut": false,
                        "duration": 63,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var post_data = {\n\turl: base_url + constants.ROUTES.v0.POST.CREATENOTIFICATIONS,\n\tform:{\n\t\ttoken: \"mV9W2cVyAitCnyx9WIT95lsGl7hbS3YSoAUZRfg6pVX\",\n\t\tbody: [{\n\t\t\tsubject : \"TR37\",\n\t\t\tsubjectValue : \"80\"\n\t\t}]\n\t}\n}\nrequest.post(post_data, function(error, response, body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 200);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bfd67bd7-4b70-47cb-ba34-7f2acf4ed711",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "DB should have the new notification",
                        "fullTitle": "Notification Enabler BACKEND API V0 8. POST /api/vf-os-enabler/v0/notifications 8.1 Create new notification for an existing token DB should have the new notification",
                        "timedOut": false,
                        "duration": 19,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request.get(base_url + constants.ROUTES.v0.GET.GETNOTIFICATIONS + \"/TR37\", function(error,response,body){\n\tif (error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(JSON.parse(body).data[JSON.parse(body).data.length - 1].subject, \"TR37 = 80\");\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c98776a1-eb8f-4905-b56e-eaeeb7798964",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "bfd67bd7-4b70-47cb-ba34-7f2acf4ed711",
                      "c98776a1-eb8f-4905-b56e-eaeeb7798964"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 82,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "a7a5addc-7520-4092-bf39-175ab6e54b83",
                    "title": "8.2 Create new notification for an existing token with no subject",
                    "fullFile": "C:\\Users\\user\\Desktop\\notification-enabler\\test\\configTestBE.js",
                    "file": "\\test\\configTestBE.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "should return status code 500",
                        "fullTitle": "Notification Enabler BACKEND API V0 8. POST /api/vf-os-enabler/v0/notifications 8.2 Create new notification for an existing token with no subject should return status code 500",
                        "timedOut": false,
                        "duration": 12,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var post_data = {\n\turl: base_url + constants.ROUTES.v0.POST.CREATENOTIFICATIONS,\n\tform:{\n\t\ttoken: \"0ahobLza90bTxNPF9wBYVOtMCoPOD8DMonijqthUila\",\n\t\tbody: [{\n\t\t\tsubject : \"\",\n\t\t\tsubjectValue : \"80\"\n\t\t}]\n\t}\n}\nrequest.post(post_data, function(error, response, body){\n\tif(error){\n\t\tdone(error);\n\t\treturn;\n\t}\n\tassert.equal(response.statusCode, 500);\n\tdone();\n})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9ef4353d-a697-4a06-a3f7-09fae2090790",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9ef4353d-a697-4a06-a3f7-09fae2090790"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}